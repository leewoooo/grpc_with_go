// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ordermanagement

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrderMangementClient is the client API for OrderMangement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderMangementClient interface {
	GetOrder(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*Order, error)
}

type orderMangementClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderMangementClient(cc grpc.ClientConnInterface) OrderMangementClient {
	return &orderMangementClient{cc}
}

func (c *orderMangementClient) GetOrder(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, "/ecommerce.v1.OrderMangement/getOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderMangementServer is the server API for OrderMangement service.
// All implementations must embed UnimplementedOrderMangementServer
// for forward compatibility
type OrderMangementServer interface {
	GetOrder(context.Context, *wrapperspb.StringValue) (*Order, error)
	mustEmbedUnimplementedOrderMangementServer()
}

// UnimplementedOrderMangementServer must be embedded to have forward compatible implementations.
type UnimplementedOrderMangementServer struct {
}

func (UnimplementedOrderMangementServer) GetOrder(context.Context, *wrapperspb.StringValue) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
}
func (UnimplementedOrderMangementServer) mustEmbedUnimplementedOrderMangementServer() {}

// UnsafeOrderMangementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderMangementServer will
// result in compilation errors.
type UnsafeOrderMangementServer interface {
	mustEmbedUnimplementedOrderMangementServer()
}

func RegisterOrderMangementServer(s grpc.ServiceRegistrar, srv OrderMangementServer) {
	s.RegisterService(&OrderMangement_ServiceDesc, srv)
}

func _OrderMangement_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderMangementServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ecommerce.v1.OrderMangement/getOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderMangementServer).GetOrder(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderMangement_ServiceDesc is the grpc.ServiceDesc for OrderMangement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderMangement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ecommerce.v1.OrderMangement",
	HandlerType: (*OrderMangementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getOrder",
			Handler:    _OrderMangement_GetOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order_management.proto",
}
